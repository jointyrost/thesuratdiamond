<?php

namespace App\Http\Controllers\Frontend\Order;

use App\Http\Controllers\Controller;
use App\Mail\OrderStatusMail;
use App\Models\Order;
use Illuminate\Http\Request;
use App\Models\Ring;
use Razorpay\Api\Api;
use App\Models\Payment;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;

class PaymentController extends Controller
{
    public function index()
    {
        $orderDetails = session()->get('order_details');


        // dd($orderDetails);
        $order_id = $orderDetails['order_id'];
        $amount = $orderDetails['total_amount'] * 100;
        $payment_currency = $orderDetails['payment_currency'];
        $before_shipping = $orderDetails['before_shipping'];

        $amountInCents = (int) floor($amount); // Convert to integer


        $payment = new Payment();
        $user = auth()->user();

        // dd($request);
        $api = new Api(env('ROZARPAY_KEY'), env('ROZARPAY_SECRET'));
        // $api = new Api(env('ROZARPAY_KEY'), env('ROZARPAY_SECRET'));

        $order = $api->order->create([
            'receipt' => 'receipt_' . uniqid(),
            'amount' => $amountInCents,
            'currency' => $payment_currency
        ]);




        $payment->payment_order_id = $order['id'];
        $payment->order_id = $order_id;
        $payment->amount = $amount / 100;
        $payment->currency = $payment_currency;
        $payment->payer_name = $user['name'];
        $payment->payer_email = $user['email'];
        $payment->payment_method =  $payment_currency;
        $payment->payment_status =  'pending';
        $payment->save();

        $data = [
            'order_id' => $order['id'],     // this si order id generated by rozarpay
            'order_main_id' => $order_id,  // this is the order's id
            'amount' => $amount / 100,
            'key' => env('ROZARPAY_KEY'),
            'name' => $user['name'],
            'email' => $user['email'],
            'phone' => $user['phone'],
            'payment_currency' => $payment_currency,
            'before_shipping' => $before_shipping
        ];


        return view('payment.payment', compact('data'));
    }

    public function response()
    {
        if (session()->has('status')) {
            return redirect('/');
        }
        return view('payment.response');
    }

    public function showReceipt(Request $request)
    {
        $orderId = $request->query('order_main_id');
        $status = $request->query('status');


        $order = Order::find($orderId);
        $user = auth()->user();

        if (!$order || Auth::id() !== $order->user_id) {
            // If the order doesn't exist or the user IDs don't match, deny access
            return response()->json(['message' => 'Access Denied'], 403);
        }

        $this->sendOrderEmail($user, $order, 'placed');    // 

        $data = [
            "payment_id" => $request->query('payment_id'),
            "order_id" => $request->query('order_id'),
            "name" => $request->query('name'),
            "email" => $request->query('email'),
            "contact" => $request->query('contact'),
            "amount" => $request->query('amount'),
            "status" => $request->query('status'),
            "payment_currency" => $request->query('payment_currency')
        ];
        // Retrieve payment data from session
        // $paymentData = session()->only(['payment_id', 'order_id', 'amount', 'status']);

        return view('payment.receipt', compact('data'));
    }

    public function showFailure(Request $request)
    {
        $data = $request->all();
        return view('payment.failure', compact('data'));
        // return view('payment.failure');
    }

    public function sendOrderEmail($user, $order, $status)
    {
        // Define subject and view based on order status
        $emailSubject = '';
        $viewTemplate = '';

        switch ($status) {
            case 'placed':
                $emailSubject = 'Order Placed Successfully';
                $viewTemplate = 'emails.order-placed';
                break;

            case 'canceled':
                $emailSubject = 'Order Canceled';
                $viewTemplate = 'emails.order-canceled';
                break;

            case 'in_process':
                $emailSubject = 'Order In Process';
                $viewTemplate = 'emails.order-in-process';
                break;

            case 'completed':
                $emailSubject = 'Order Completed';
                $viewTemplate = 'emails.order-completed';
                break;

            case 'shipped':
                $emailSubject = 'Order Shipped';
                $viewTemplate = 'emails.order-shipped';
                break;
        }

        // Send the email
        Mail::mailer('order_smtp')->to($user->email)->send(new OrderStatusMail($order, $viewTemplate, $emailSubject));
    }
}
